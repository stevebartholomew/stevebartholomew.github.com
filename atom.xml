<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Stephen Bartholomew: Programmer]]></title>
  <link href="http://stephenbartholomew.co.uk/atom.xml" rel="self"/>
  <link href="http://stephenbartholomew.co.uk/"/>
  <updated>2014-04-25T08:52:14+01:00</updated>
  <id>http://stephenbartholomew.co.uk/</id>
  <author>
    <name><![CDATA[Stephen Bartholomew]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dev Diary - 25th April 2014]]></title>
    <link href="http://stephenbartholomew.co.uk/blog/2014/04/25/dev-diary-25th-april-2014/"/>
    <updated>2014-04-25T07:32:00+01:00</updated>
    <id>http://stephenbartholomew.co.uk/blog/2014/04/25/dev-diary-25th-april-2014</id>
    <content type="html"><![CDATA[<h2>This week</h2>

<p>The app store wait continues while we work on promo sites and continued Android fixes.</p>

<h2>Spending time with Android</h2>

<p>I&#8217;ve spend the week using a Nexus 5 as my carry phone to get a feel for the subtle differences in the platform. It&#8217;s been a good learning exercise as I now have a better understanding of Android.</p>

<p>On the whole it&#8217;s what I expected: great service integration &amp; some interesting features but way lower quality of hardware and software. I&#8217;ve always thought the UI looked messy but it&#8217;s actually just a bad user experience in many places.</p>

<h3>Third-party apps</h3>

<p>I&#8217;m a heavy podcast user - I listen to multiple podcasts during the day. My week on Android was made worse but a complete lack of decent podcast clients. Every one of them was awful - confusing, overblown interfaces, even the &#8216;basic&#8217; features were impossible to use and understand. I tried many - both paid and free - from &#8216;the best of&#8217; lists and none of them made any sense.</p>

<h2>Xamerin</h2>

<p>Like many programmers my reaction to the lack of a decent podcast client was to think &#8216;hey - I could write my own!&#8217;. This lead me to the <a href="http://xamarin.com/">Xamerin Project</a>. I remember Xamerin &amp; Mono from the early 2000s when I was primarily working in .NET.</p>

<p>After working on a PhoneGap-based project it was interesting to see another approach to the problem of cross-device development. So far I&#8217;m impressed. The main idea is to write your core code in shared libraries then create platform-specific UI code that hooks up to it. The whole thing is then compiled down and run on a platform-specific runtime shipped with the app.</p>

<h2>DHH vs TDD</h2>

<p>I was a die-hard, London-school TDDer and boy did I talk about it. My approach has softened a lot recently. I broadly agree with DHH&#8217;s issue with being so prescriptive. Many things that we treat as process should actually be tools for getting the job done. Pair programming, TDD, Agile etc are all susceptible to &#8216;silver-bullet&#8217; syndrome.</p>

<p>It is however, important to remember that skepticism is about applying critical thinking - not just dismissing out of hand. The urge to argue against the doctrine can blind you to the good stuff. For example, you&#8217;re missing out if you&#8217;ve <em>never</em> used tests as a way to drive design. A lot of the time it just makes the feedback cycle quicker.</p>

<p>Ultimately we&#8217;re all just trying to write good code and get good results. I can&#8217;t say it better than Zed Shaw: <a href="http://programming-motherfucker.com/">Programming, Motherfucker</a>.</p>

<h2>Listening</h2>

<p>The ongoing debates and issues surrounding sexism in tech have no doubt been on everyone&#8217;s minds recent. The <a href="http://www.imore.com/debug-34-sexism-tech">Debug podcast</a> had a great discussion with a panel of women in the tech industry.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dev Diary - 17th April 2014]]></title>
    <link href="http://stephenbartholomew.co.uk/blog/2014/04/17/dev-diary-17th-april-2014/"/>
    <updated>2014-04-17T14:32:00+01:00</updated>
    <id>http://stephenbartholomew.co.uk/blog/2014/04/17/dev-diary-17th-april-2014</id>
    <content type="html"><![CDATA[<h2>This week</h2>

<p>We&#8217;re now in the &#8216;Waiting for Review&#8217; stage of every iOS release so most of the time has been spent tidying up, spiking new features and bug fixing in prep for our Android release.</p>

<h2>Listening to smart people</h2>

<p>A few weeks ago I had a debate about our evolving API with my good friend &amp; college <a href="http://twitter.com/timpeat">Tim</a>. He was pushing for a more &#8216;hypermedia-style&#8217; while I was more keen on &#8216;keeping things simple&#8217;.  I&#8217;ve always kept and ear to the ground on hypermedia but it felt too up in the air still.</p>

<p>My mind has been changed after listening to the &#8221;<a href="http://javascriptjabber.com/104-jsj-hypermedia-apis-with-steve-klabnik/">Hypermedia APIs</a>&#8221; epsiode of Javacript Jabber where <a href="http://twitter.com/steveklabnik">Steve Klabnik</a> goes in depth on the philosophy behind hypermedia and talks about <a href="http://jsonapi.org">jsonapi.org</a>.  With a specification building around it - and the benefits of convention and a richer data set - I really feel like it&#8217;s something we can get behind. I&#8217;m really glad we versioned our APIs sensibly!</p>

<p>I&#8217;m also resolved to dig deeper before dismissing an idea. A throw away comment from Steve hit it home for me: &#8220;I was like, &#8216;That person&#8217;s smart. But they said something that sounds stupid. I should maybe think about why I feel that’s true and maybe go look into what their argument is.&#8217;&#8221;.</p>

<h2>Podcasts</h2>

<p>The past few Javascript Jabber episodes have really stood out for me. <a href="https://twitter.com/rockbot">Raquel Vélez</a> talking about <a href="http://javascriptjabber.com/103-jsj-robots-with-raquel-velez/">robotics and Javascript</a> was fantastic and really inspiring to get out and play with something other than pure code.</p>

<p>The Incomparable have rebooted their podcast <a href="http://www.theincomparable.com/teevee/">Teevee</a>. At there moment they&#8217;re talking about Game of Thrones.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dev Diary - 11th April 2014]]></title>
    <link href="http://stephenbartholomew.co.uk/blog/2014/04/11/dev-diary-11th-april-2014/"/>
    <updated>2014-04-11T13:20:00+01:00</updated>
    <id>http://stephenbartholomew.co.uk/blog/2014/04/11/dev-diary-11th-april-2014</id>
    <content type="html"><![CDATA[<h2>This week</h2>

<p>Super excited that the project I&#8217;m on a work is shipping next week!</p>

<p>Looking back I&#8217;m pretty impressed with what we’ve achieved so far.  We&#8217;ve used open source tech well but we’re still only a small team.  Over the coming weeks we&#8217;ll be shipping an app on both iOS and Android that hooks up to our existing backend systems - then the real work starts!</p>

<hr />

<p>We were lucky enough to not be vulnerable to heartbleed but I&#8217;ve really enjoyed digging into the bug.  There’s a great rundown of the specifics <a href="http://blog.existentialize.com/diagnosis-of-the-openssl-heartbleed-bug.html">here</a>.</p>

<p>I’ve always worked in memory managed languages, but my current C studying has just hit memory management. I was pleased to be able to keep up!</p>

<h2>Reading</h2>

<p>I&#8217;ve finally picked up <a href="http://sicpebook.wordpress.com/">SICP</a>. Not too far in yet but it’s great to be digging deeper into compsci.</p>

<p>On my commute I’m still working through the &#8221;<a href="http://c.learncodethehardway.org/">Learn C the Hard Way</a>&#8221; which has been a lot of fun.  I have to confess that I’ve started copy/pasting the code but that is meaning I have more time for the ‘Extra Credit’ exercises.</p>

<p>My son is obsessed with Minecraft so I’ve also picked up the <a href="http://pragprog.com">pragprog</a>&#8217;s <a href="http://pragprog.com/book/ahmine/learn-to-program-with-minecraft-plugins">book on creating plugins for the game</a>. It’s giving me a light introduction to Java and has been good to pair with a 5 year old.</p>

<h2>Listening</h2>

<p>Related to the Minecraft obsession, I’ve found the “Volume Alpha” by C418 really good for coding.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Iterate Imperfection]]></title>
    <link href="http://stephenbartholomew.co.uk/blog/2014/04/07/iterate-imperfection/"/>
    <updated>2014-04-07T13:21:00+01:00</updated>
    <id>http://stephenbartholomew.co.uk/blog/2014/04/07/iterate-imperfection</id>
    <content type="html"><![CDATA[<p>My wife has had the same website I built for her <a href="http://www.sevenveils.co.uk">dance business</a> in 2005. In that time we&#8217;ve had countless attempts at redeveloping it, normally starting with opening Photoshop, or setting up an account on the latest CMS service. These attempts all ended up half completed.</p>

<p>Running off the high of an event on Saturday night, we sat down on Sunday to prepare for the next show. Rather than the usual hacky updates, I decided to do improve things a little. Not a full rebuild, not perfect - but good enough.</p>

<!-- more -->


<p>3 hours later I had not only made the content changes but also improved the layout  <em>and</em> made developing it much easier.</p>

<h2> Before</h2>

<ul>
<li>Table-based layout</li>
<li>Updated via Dreamweaver / SFTP</li>
<li>Broken layout</li>
</ul>


<p><img src="http://stephenbartholomew.co.uk/images/blog/iterate-imperfection/before.jpg"/></p>

<h2> After</h2>

<ul>
<li>Pure CSS-based layout</li>
<li>Source control on Bitbucket</li>
<li>Deployed via Capistrano</li>
<li>Refreshed design</li>
<li>Google analytics</li>
</ul>


<p><img src="http://stephenbartholomew.co.uk/images/blog/iterate-imperfection/after.jpg"/></p>

<h2>Things I didn&#8217;t do</h2>

<ul>
<li>Replace the PHP header/footer templating with something more modern</li>
<li>Convert to CSS framework</li>
<li>Significant redesign</li>
<li>Fix all HTML/CSS/content issues</li>
</ul>


<p>The changes aren&#8217;t earth-shattering but they&#8217;re a actually a big step forward from what was there before. Improving the development workflow has also meant I can make regular updates much more easily.</p>

<p>I find that it&#8217;s easy to get overwhelmed by a large task but often, I&#8217;ve added a lot of cruft to the task list that just isn&#8217;t needed. This time I focused on a few important changes and I&#8217;m really happy with the results so far - what&#8217;s more, so is my wife :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automated UI Testing with Cucumber for Cordova/Phonegap apps]]></title>
    <link href="http://stephenbartholomew.co.uk/blog/2013/12/14/automated-ui-testing-with-cucumber-for-cordova-phonegap-apps/"/>
    <updated>2013-12-14T20:45:00+00:00</updated>
    <id>http://stephenbartholomew.co.uk/blog/2013/12/14/automated-ui-testing-with-cucumber-for-cordova-phonegap-apps</id>
    <content type="html"><![CDATA[<p>Both iOS and Android have UI automation frameworks for driving the UI which is great for integration/acceptance testing for your app.  However, when you&#8217;re using a web/native hybrid framework like Cordova, this can get tricky.</p>

<p>If you come from the Ruby world, you may also be used to using Cucumber for integration testing. While the testing landscape for hybrid apps is a little rocky, a lot of smart people are working on some great tools to improve things. With some effort, you can have Cucumber-based integration spec suite up and running for your hybrid app with relative ease.</p>

<!-- more -->


<h2>The Main Players</h2>

<h3>Appium</h3>

<p><a href="http://appium.io">Appium</a> can launch your app and interact with it via the platform&#8217;s automation framework. It provides a Selenium remote compatible interface to your app that you can use with an driver that supports it.</p>

<h3>Selenium WebDriver JS</h3>

<p>We&#8217;re going to use <a href="https://code.google.com/p/selenium/wiki/WebDriverJs">WebDriver JS</a> - the official Javascript driver for the Selenium project.  The documentation is a little thin on examples but once you get the hang of it</p>

<p>The web driver talks to any Seleinum-compatible REST-style API over HTTP. For our purposes this will be Appium but you can also point it at services like Browser stack which support a compatible API.</p>

<h3>cucumberjs</h3>

<p><a href="https://github.com/cucumber/cucumber-js">Cucumberjs</a> is an active and reasonably featured Javascript port of the <a href="http://cukes.info">Cucumber toolset</a>.</p>

<h3>Your app</h3>

<p>I&#8217;m assuming you&#8217;re working on a hybrid app using the latest Cordova (3.1.x at the time of writing).</p>

<h2>Setting up</h2>

<p>Appium is available as an npm package:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install appium</span></code></pre></td></tr></table></div></figure>


<p>There&#8217;s also an <a href="https://bitbucket.org/appium/appium.app/downloads/">OSX app</a> available.</p>

<p>There are a few platform specific steps you&#8217;ll need to carry out to get up and running which you can find in the <a href="http://appium.io/getting-started.html">Appium Getting Started guide</a>.</p>

<p>On iOS for example, you need to run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo authorize_ios</span></code></pre></td></tr></table></div></figure>


<p>to allow Appium to use UI Automation and the simulator.</p>

<p>Next, you&#8217;ll need to install a few node modules:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install -g cucumberjs selenium-webdriver</span></code></pre></td></tr></table></div></figure>


<p>You can also use <a href="http://">Grunt</a> to manage these modules. The <code>grunt-cucumber</code> has various tasks for running your specs.</p>

<p>You&#8217;ll need to setup a few directories in your app yourself:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>features/
</span><span class='line'>    step_definitions/
</span><span class='line'>    support/</span></code></pre></td></tr></table></div></figure>


<h2>Creating the World</h2>

<p>The World class gives common setup and configuration to your cucumber environment.  Create <code>features/support/world.js</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">appPath</span> <span class="o">=</span> <span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">&#39;/../../relative/path/to/my/cordova/built/app/MyApp.app&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">webdriver</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;selenium-webdriver&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">driver</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">webdriver</span><span class="p">.</span><span class="nx">Builder</span><span class="p">().</span>
</span><span class='line'>  <span class="nx">withCapabilities</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">browserName</span><span class="o">:</span> <span class="s1">&#39;iOS&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">platform</span><span class="o">:</span>    <span class="s1">&#39;Mac&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">version</span><span class="o">:</span>     <span class="s1">&#39;7.0&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">app</span><span class="o">:</span>         <span class="nx">appPath</span>
</span><span class='line'>  <span class="p">}).</span>
</span><span class='line'>  <span class="nx">usingServer</span><span class="p">(</span><span class="s1">&#39;http://localhost:4723/wd/hub&#39;</span><span class="p">).</span>
</span><span class='line'>  <span class="nx">build</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">World</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">World</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">driver</span> <span class="o">=</span> <span class="nx">driver</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">callback</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">World</span> <span class="o">=</span> <span class="nx">World</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, the webdriver is setup to send configuration details to the Appium interface. We pass in versioning information along with the path to the app we&#8217;d like to launch.</p>

<h2>First Steps</h2>

<p>Create <code>features/step_definitions/app_steps.js</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">appSteps</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">World</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;../support/world.js&quot;</span><span class="p">).</span><span class="nx">World</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">Given</span><span class="p">(</span><span class="sr">/^I load the app$/</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">driver</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">driver</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">driver</span><span class="p">.</span><span class="nx">getAllWindowHandles</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">handles</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">driver</span><span class="p">.</span><span class="nx">switchTo</span><span class="p">().</span><span class="nb">window</span><span class="p">(</span><span class="nx">handles</span><span class="p">[</span><span class="mi">0</span><span class="p">]).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">callback</span><span class="p">();</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">Then</span><span class="p">(</span><span class="sr">/^I should see &quot;([^&quot;]*)&quot;$/</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">text</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">driver</span><span class="p">.</span><span class="nx">getPageSource</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">source</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">source</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="nx">text</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">callback</span><span class="p">();</span>
</span><span class='line'>      <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">callback</span><span class="p">.</span><span class="nx">failure</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">appSteps</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Take particular note of the &#8216;I load the app&#8217; step. This code selects the <code>UIWebView</code> that contains your hybrid app as the main window to drive. Without this, you&#8217;ll be running against the native app.</p>

<p>One gotcha here is the webdriver syntax. It uses promises which can be a little strange to work with if you&#8217;re coming from other platforms. I&#8217;ll be digging deeper on this syntax in a future post.</p>

<p>With these steps we can build a basic cucumber feature:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='cucumber'><span class='line'><span class="k">Feature:</span><span class="nf"> App load</span>
</span><span class='line'><span class="nf">  As a user</span>
</span><span class='line'><span class="nf">  I want to load the app</span>
</span><span class='line'><span class="nf">  So that I can experience great joy</span>
</span><span class='line'>
</span><span class='line'><span class="nf">  </span><span class="k">Scenario:</span><span class="nf"> Loading the app successfully</span>
</span><span class='line'><span class="k">    Given </span><span class="nf">I load the app</span>
</span><span class='line'><span class="nf">    </span><span class="k">Then </span><span class="nf">I should see &quot;</span><span class="s">Hello</span><span class="nf">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Save this as <code>features/app_load.feature</code>. Replace &#8216;Hello&#8217; with some text that appears on the first screen of your app.</p>

<h2>Running</h2>

<p>Try this all out by running cucumberjs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cucumber'><span class='line'><span class="nf">cucumber.js</span>
</span></code></pre></td></tr></table></div></figure>


<p>You should see the simulator start up at this point, hopefully followed by some pleasing pass messages:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cucumber'><span class='line'><span class="nf">..</span>
</span><span class='line'>
</span><span class='line'><span class="s">1</span><span class="nf"> scenario (</span><span class="s">1</span><span class="nf"> passed)</span>
</span><span class='line'><span class="s">2</span><span class="nf"> steps (</span><span class="s">2</span><span class="nf"> passed)</span>
</span></code></pre></td></tr></table></div></figure>


<p>By this point I hope you&#8217;re up and running with the stack. Next time, we&#8217;ll dig a little further into the Selenium webdriver.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building SBGauge]]></title>
    <link href="http://stephenbartholomew.co.uk/blog/2013/11/05/building-sbgauge/"/>
    <updated>2013-11-05T17:59:00+00:00</updated>
    <id>http://stephenbartholomew.co.uk/blog/2013/11/05/building-sbgauge</id>
    <content type="html"><![CDATA[<p>I built <code>SBGauge</code> as part of <a href="http://www.groovecoachapp.com">GrooveCoach</a> as a way to indicate which &#8216;level&#8217; the user was on. When you tapped &#8216;+&#8217; or &#8216;-&#8217; the gauge changed accordingly. As part of developing that app I was keen to open source anything I could.</p>

<p>Given the flexibility of this simple library, I thought it would make an interesting code walkthrough.</p>

<!-- more -->


<h2>Drawing the Gauge</h2>

<p><code>SBGauge</code> consists of two <code>CAShapeLayer</code>s: the animating gauge itself and the &#8216;track&#8217; underneath.  The <code>draw</code> method simply creates two circles with different colors and adds them to the view&#8217;s backing layer:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="n">gaugeLayer</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">drawCircleLayer:</span><span class="n">self</span><span class="p">.</span><span class="n">gaugeColor</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">CAShapeLayer</span> <span class="o">*</span><span class="n">trackLayer</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">drawCircleLayer:</span><span class="n">self</span><span class="p">.</span><span class="n">trackColor</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">layer</span> <span class="nl">addSublayer:</span><span class="n">trackLayer</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">layer</span> <span class="nl">addSublayer:</span><span class="n">gaugeLayer</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>The circles are drawn by the <code>drawCircleLayer:(UIColor *)color</code> method in <code>SBGaugeView</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'>  <span class="n">circleLayer</span><span class="p">.</span><span class="n">path</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIBezierPath</span> <span class="nl">bezierPathWithRoundedRect:</span><span class="n">CGRectInset</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">bounds</span><span class="p">,</span> <span class="n">inset</span><span class="p">,</span> <span class="n">inset</span><span class="p">)</span>
</span><span class='line'>                                                <span class="nl">cornerRadius:</span><span class="n">radius</span><span class="o">-</span><span class="n">inset</span><span class="p">].</span><span class="n">CGPath</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using <code>CGRectInset</code> means we draw <em>within</em> the view itself, not on the outside. This is especially if you&#8217;re working in interface builder - the gauge shouldn&#8217;t bust out of the frame you create for the view.</p>

<h2>Context</h2>

<p><code>SBGaugeContext</code> is responsible for calculating how big the segments will be and keeping track of the current &#8216;step&#8217;.  It is initialized with the number of segments:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="n">gauge</span> <span class="o">=</span> <span class="p">[[</span><span class="n">SBGaugeContext</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithSegments:</span><span class="n">self</span><span class="p">.</span><span class="n">segments</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>When you tell <code>SBGauge</code> to <code>stepUp</code>, the current <code>SBGaugeContext</code> will figure out what the current &#8216;step&#8217; should now be. <code>SBGauge</code> will then draw based on this new context.</p>

<p>This decouples the logic surrounding step calculations from the drawing of the view itself.</p>

<h2>Animating</h2>

<p>When the view is redrawn, a <code>CABasicAnimation</code> is created to animate from the previous gauge step to the current step. <code>animateProgress</code> uses the gauge layer&#8217;s &#8216;strokeEnd&#8217; animate the length of the gauge:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="c1">// setup a basic animation using strokeEnd</span>
</span><span class='line'><span class="n">CABasicAnimation</span> <span class="o">*</span><span class="n">drawAnimation</span> <span class="o">=</span> <span class="p">[</span><span class="n">CABasicAnimation</span> <span class="nl">animationWithKeyPath:</span><span class="s">@&quot;strokeEnd&quot;</span><span class="p">];</span>
</span><span class='line'><span class="n">drawAnimation</span><span class="p">.</span><span class="n">duration</span>            <span class="o">=</span> <span class="mf">0.2</span><span class="p">;</span>
</span><span class='line'><span class="n">drawAnimation</span><span class="p">.</span><span class="n">repeatCount</span>         <span class="o">=</span> <span class="mf">1.0</span><span class="p">;</span>
</span><span class='line'><span class="n">drawAnimation</span><span class="p">.</span><span class="n">removedOnCompletion</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// set the from/to values based on the user&#39;s previous &#39;step&#39; &amp; the current one</span>
</span><span class='line'><span class="n">drawAnimation</span><span class="p">.</span><span class="n">fromValue</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithFloat:</span><span class="n">gauge</span><span class="p">.</span><span class="n">previous</span><span class="p">];</span>
</span><span class='line'><span class="n">drawAnimation</span><span class="p">.</span><span class="n">toValue</span>   <span class="o">=</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithFloat:</span><span class="n">gauge</span><span class="p">.</span><span class="n">value</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// set how the animation should look</span>
</span><span class='line'><span class="n">drawAnimation</span><span class="p">.</span><span class="n">timingFunction</span> <span class="o">=</span> <span class="p">[</span><span class="n">CAMediaTimingFunction</span> <span class="nl">functionWithName:</span><span class="n">kCAMediaTimingFunctionEaseIn</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// finally apply the animation to the gauge layer</span>
</span><span class='line'><span class="p">[</span><span class="n">gaugeLayer</span> <span class="nl">addAnimation:</span><span class="n">drawAnimation</span> <span class="nl">forKey:</span><span class="nb">nil</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>You&#8217;ll see that <code>SBGaugeContext</code> handles the calculation of the value itself.</p>

<h2>Style</h2>

<p><code>SBGauge</code> doesn&#8217;t have any additional built in &#8216;looks&#8217; but by simply setting the <code>width</code> property, a number of different styles can be achieved.</p>

<p>The size of the gauge itself is calcuated based on the containing frame (plus some hardcoded tweaking):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="n">CGFloat</span> <span class="n">radius</span> <span class="o">=</span> <span class="p">(</span><span class="n">MIN</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">,</span><span class="n">self</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span><span class="o">+</span><span class="mi">40</span><span class="p">;</span>
</span><span class='line'><span class="n">CGFloat</span> <span class="n">inset</span>  <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This makes it possible to get at least an idea of the size of the view in interface builder.</p>

<hr/>


<p>That&#8217;s really all there is to it!</p>

<p>I&#8217;ve since experimented with driving the guage using a large number of steps and an <code>NSTimer</code> which find in the project&#8217;s <a href="http://www.github.com/stevebartholomew/SBGauge/">README</a>.</p>

<p><a href="http://www.github.com/stevebartholomew/SBGauge">Check it out on Github</a> - I&#8217;d love your feedback.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Glass Bottles and the Law of Demeter]]></title>
    <link href="http://stephenbartholomew.co.uk/blog/2012/06/07/glass-bottles-and-the-law-of-demeter/"/>
    <updated>2012-06-07T21:41:00+01:00</updated>
    <id>http://stephenbartholomew.co.uk/blog/2012/06/07/glass-bottles-and-the-law-of-demeter</id>
    <content type="html"><![CDATA[<p>I can&#8217;t throw glass bottles in the bin anymore.  I&#8217;m not a dread-locked earth hippy but I&#8217;ve been recycling for so many years that it just feels&#8230;wrong.</p>

<p>Good habits work best when they&#8217;re instinctual - like muscle memory.</p>

<!-- more -->


<p></p>

<p>What if this looked weird to you?</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">organisation</span><span class="o">.</span><span class="n">subscription</span><span class="o">.</span><span class="n">memberships</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">user_id</span><span class="p">:</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you&#8217;re a Rails developer this kind of thing probably litters your code but anyone with a site of significant size knows what impact this has on your tests.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;creates a membership&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">o</span> <span class="o">=</span> <span class="no">Organisation</span><span class="o">.</span><span class="n">create</span>
</span><span class='line'>  <span class="n">subscription</span> <span class="o">=</span> <span class="n">o</span><span class="o">.</span><span class="n">subscription</span><span class="o">.</span><span class="n">create</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># hit the database a few more times</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Anyone else tried TDDing with a 10 minute-long test suite?</p>

<p>It also makes inject additional logic into process a real pain:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Membership</span>
</span><span class='line'>  <span class="n">before_create</span> <span class="ss">:sadface</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>So what if you instinctually <em>had</em> to abstract that interface - because chaining methods just feels wrong:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">organisation</span><span class="o">.</span><span class="n">issue_membership</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You only have to test the logic within the object you&#8217;re interested in. If the connections to other objects are only one level too, simple stubbing is all you need:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;creates a membership&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">o</span> <span class="o">=</span> <span class="no">Organisation</span><span class="o">.</span><span class="n">build</span>
</span><span class='line'>  <span class="n">subscription</span> <span class="o">=</span> <span class="n">stub</span>
</span><span class='line'>  <span class="n">subscription</span><span class="o">.</span><span class="n">should_receive</span><span class="p">(</span><span class="ss">:issue_membership</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span>
</span><span class='line'>  <span class="n">o</span><span class="o">.</span><span class="n">stub</span><span class="p">(</span><span class="n">subscription</span><span class="p">:</span> <span class="n">subscription</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">o</span><span class="o">.</span><span class="n">issue_membership</span><span class="p">(</span><span class="n">stub</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Injecting logic becomes trival and remains in the right place.  It also means the top-level interface to <code>Organisation</code> stays untouched, regardless of what happens futher down the logic chain.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Subscription</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">issue_membership</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>    <span class="n">happy_face</span>
</span><span class='line'>    <span class="n">memberships</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">user_id</span><span class="p">:</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The thinking here is nothing new and is only a shallow implementation of a deeper concept, but small habits can reap big rewards as your application grows.</p>

<h2>Key Points</h2>

<ul>
<li>Consider the entry points into the objects you create</li>
<li>You shouldn&#8217;t have to poke into objects that aren&#8217;t directly connected an object</li>
<li>Testing first will help with this - if you&#8217;re creating a load of objects just test one line of logic in a method - you should hear alarm bells</li>
</ul>


<h2>Further Reading</h2>

<ul>
<li><a href="http://objectsonrails.com/">Objects on Rails</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Todoist Part 1: The Todo]]></title>
    <link href="http://stephenbartholomew.co.uk/blog/2012/04/01/todoist-part-1-the-todo/"/>
    <updated>2012-04-01T20:55:00+01:00</updated>
    <id>http://stephenbartholomew.co.uk/blog/2012/04/01/todoist-part-1-the-todo</id>
    <content type="html"><![CDATA[<p>Todoist is a simple todo list application that I’ll be building from the ground up, focussing on the objects and interactions first.</p>

<!-- more -->


<p>I’ll be using Ruby 1.9.3, Rails 3.2 and Rspec with Capybara for testing.</p>

<h2>Feature #1: Adding a Todo</h2>

<h3>An integration test</h3>

<p>The first thing I do is create a test explaining how I as a user want to interact with the application:</p>

<p><em>spec/integration/todos_integration_spec.rb:</em></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;spec_helper&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="s2">&quot;Todoist&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">context</span> <span class="s2">&quot;creating a todo&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;provides a form to create a new todo&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">visit</span> <span class="s2">&quot;/&quot;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">fill_in</span> <span class="s2">&quot;todo[body]&quot;</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="s2">&quot;Just something I need to do&quot;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">click_button</span> <span class="s2">&quot;Save&quot;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">page</span><span class="o">.</span><span class="n">should</span> <span class="n">have_content</span><span class="p">(</span><span class="s2">&quot;Added&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This wont pass and there’s a lot that needs to be hooked up for it to work so I’m going to forget about it for the moment.</p>

<p>The Todo class
My feature is ‘Adding a Todo’ so the first thing I’ll do is make a spec for a class called ‘Todo’ and a method called ‘add’:</p>

<p><em>spec/models/todo_spec.rb:</em></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">require_relative</span> <span class="err">‘</span><span class="o">.</span><span class="n">.</span><span class="o">/.</span><span class="n">.</span><span class="o">/</span><span class="n">app</span><span class="o">/</span><span class="n">models</span><span class="o">/</span><span class="n">todo</span><span class="err">’</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">Todo</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;adds a new todo item&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">task</span> <span class="o">=</span> <span class="s2">&quot;Something I have to do&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">todo</span> <span class="o">=</span> <span class="no">Todo</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">task</span><span class="p">:</span> <span class="n">task</span><span class="p">)</span>
</span><span class='line'>    <span class="n">todo</span><span class="o">.</span><span class="n">task</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="n">task</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Getting this to pass is straight forward:</p>

<p><em>app/models/todo.rb:</em></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Todo</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">attributes</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@attributes</span> <span class="o">=</span> <span class="n">attributes</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">task</span>
</span><span class='line'>    <span class="vi">@attributes</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:task</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">add</span><span class="p">(</span><span class="n">attributes</span><span class="p">)</span>
</span><span class='line'>    <span class="kp">new</span><span class="p">(</span><span class="n">attributes</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>More than one object
A single instance on its own isn’t particularly useful though.  I’ll add storage and retrieval:</p>

<p><em>spec/models/todo_spec.rb:</em></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;gets all todos&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">todo</span> <span class="o">=</span> <span class="no">Todo</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">task</span><span class="p">:</span> <span class="s2">&quot;Something&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="no">Todo</span><span class="o">.</span><span class="n">get_all_todos</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="n">todo</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And my Todo class becomes:</p>

<p><em>app/models/todo.rb:</em></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Todo</span>
</span><span class='line'>  <span class="vc">@@_todos</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">attributes</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@attributes</span> <span class="o">=</span> <span class="n">attributes</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">task</span>
</span><span class='line'>    <span class="vi">@attributes</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:task</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">add</span><span class="p">(</span><span class="n">attributes</span><span class="p">)</span>
</span><span class='line'>    <span class="n">todo</span> <span class="o">=</span> <span class="kp">new</span><span class="p">(</span><span class="n">attributes</span><span class="p">)</span>
</span><span class='line'>    <span class="vc">@@_todos</span> <span class="o">&lt;&lt;</span> <span class="n">todo</span>
</span><span class='line'>    <span class="n">todo</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">get_all_todos</span>
</span><span class='line'>    <span class="vc">@@_todos</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I can now add todo and retrieve them later.</p>

<p><strong>Next up:</strong> I&#8217;ll hook this up to a controller.</p>

<p>You can <a href="https://github.com/stevebartholomew/todoist/tree/77c29e49ae38a6b8ce3be2254b3809b43349fc18">view this commit on github</a></p>

<p>Got a comment? Drop me a message on <a href="http://twitter.com/sbartholomew">twitter</a>.</p>

<p><a href="http://stephenbartholomew.co.uk/atom.xml">Subscribe</a> to hear about the next in the series.</p>
]]></content>
  </entry>
  
</feed>
