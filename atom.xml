<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Stephen Bartholomew: Programmer]]></title>
  <link href="http://stephenbartholomew.co.uk/atom.xml" rel="self"/>
  <link href="http://stephenbartholomew.co.uk/"/>
  <updated>2015-03-01T18:50:26+00:00</updated>
  <id>http://stephenbartholomew.co.uk/</id>
  <author>
    <name><![CDATA[Stephen Bartholomew]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dev Diary - 1st March 2015]]></title>
    <link href="http://stephenbartholomew.co.uk/blog/2015/03/01/dev-diary-1st-march-2015/"/>
    <updated>2015-03-01T18:49:00+00:00</updated>
    <id>http://stephenbartholomew.co.uk/blog/2015/03/01/dev-diary-1st-march-2015</id>
    <content type="html"><![CDATA[<h2>Understanding Games</h2>

<p>I don&#8217;t play many games but <a href="http://altosadventure.com">Alto&#8217;s Adventure</a> sparked my curiosity in games programming again.</p>

<p>Games programming is quite a bit different from the programming I do day to day. I started taking a look at the amazing tutorials on <a href="http://unity3d.com/learn/tutorials/modules">Unity&#8217;s website</a> but I&#8217;d really like to get a grounding in the core concepts of what makes a game engine.</p>

<p>In order to work through this, I started writing a basic games engine in Javascript. It handles rendering of basic game entities (i.e. boxes), very basic collision detection &amp; poorly implemented physics.</p>

<p>I&#8217;ve put it on github: <a href="https://github.com/stevebartholomew/platformer">Platformer</a>.</p>

<h2>Podcast App</h2>

<p>Seeing the designs come together has been really exciting. Most of the basic feed syncing, episode display/details/play views and I&#8217;m now refining that core functionality.  Handling all the different states that episodes and related assets can be in has been challenging.  Spending some time getting good test coverage has helped though. I&#8217;ve made some fairly large refactors of various parts of the code base without much breakage.</p>

<p>I&#8217;m starting to see areas that could be turned into libraries although I&#8217;m not really sure on the best way to do this in the Java/Android world. <a href="http://search.maven.org">Maven Central</a> seems to be the <a href="https://rubygems.org">Rubygems</a>/<a href="https://www.npmjs.com">npm</a> equivilent but it all seems to be way more complicated.  I&#8217;ll be doing some research on this in the near future.</p>

<p>In particular, I&#8217;ll be looking to outsource the podcast feed parsing library. I consider it to have a reasonably easy-to-use API which might benefit others but I&#8217;m also keen to get input from a community for handling feed formats. Feed formatting is a constant pain as many differ and are often just plain wrong.</p>

<h2>Hirgana Practice</h2>

<p>This app came out of nowhere on a Sunday morning when I was considering the Hiragan practice app I&#8217;d been using. Many apps use the &#8216;flash card&#8217; style, showing you a character and asking you to choose from a list of Roman sounds - for example, for &#8220;ち&#8221; you would tap &#8220;chi&#8221;. This is problematic because it encourages you to &#8220;map&#8221; sounds to known English equivilents instead of internalising the sound itself.</p>

<p>In classic programmer style, instead of just practicing, I wrote an app that plays the sound and you then write the character on screen. You then tap when you&#8217;re done and compare your character to the actual one.</p>

<p>I lifted most of the drawing code from <a href="http://www.raywenderlich.com/18840/how-to-make-a-simple-drawing-app-with-uikit">here</a> and translated to Swift.  I&#8217;m going to have a go at improving this using actual Bezier paths instead - I&#8217;ve been reading <a href="http://code.tutsplus.com/tutorials/smooth-freehand-drawing-on-ios--mobile-13164">this</a> to understand more.</p>

<p>With a basic design in place I may release it in the coming weeks.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dev Diary - 22nd August 2014]]></title>
    <link href="http://stephenbartholomew.co.uk/blog/2014/08/22/dev-diary-22nd-august-2014/"/>
    <updated>2014-08-22T12:33:00+01:00</updated>
    <id>http://stephenbartholomew.co.uk/blog/2014/08/22/dev-diary-22nd-august-2014</id>
    <content type="html"><![CDATA[<p>Work on the <a href="http://www.reallyenglish.com">Reallyenglish</a> mobile app is going well as the team prepares for the upcoming official release on Android. After working through bugs on the platform I&#8217;m actually really preferring a lot of the toolset that comes with Android over iOS.</p>

<p>Aside from the day job, things have been rather Go-focused.</p>

<h2>Podcast app: Adding subscriptions</h2>

<p>I&#8217;m keeping the subscriptions/directory side of things on the server at the moment.  Initially I wrote the directory search API in node but on <a href="http://twitter.com/alinajaf">Ali</a>&#8217;s suggestion I tried out <a href="http://www.golang.org">Go</a>. Turns out, I <em>really</em> like it.</p>

<p>Go is super powerful while taking care of some of the more house-keepy parts of something like C. A more concurrent style of programming is actively encouraged in the language through nice abstractions. You can let Go deal with stuff like load balancing between CPUs but it doesn&#8217;t feel like you&#8217;re being protected from reality.</p>

<p>I also built a basic version of the podcast search UI for the Android app. Starting to get a feel for how activities and fragments fit together. When I hooked up the UI to the directory service I was pleasantly surprised that Android threw an exception when I tried accessing the network on the main thread on my first pass. Quite a change for the platform.</p>

<h2>Crypto Challenges</h2>

<p>I had a really good time Wednesday when I attended <a href="http://twitter.com/alinajaf">Ali</a>&#8217;s workshop/coplay working through <a href="http://cryptopals.com/">the matasano crypto challenges</a>.  A few of us hooked up in a chat room and chatted as we worked through the challenges, sharing ideas as we went. We all chose to use Go which proved really good for the task.</p>

<p>Ali also doubled the earnings from the ticket price and donated the lot to <a href="http://www.eavesforwomen.org.uk/">Eaves</a> - what a great guy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[From Subtle Sexist to Aspiring Feminist]]></title>
    <link href="http://stephenbartholomew.co.uk/blog/2014/08/03/from-subtle-sexist-to-aspiring-feminist/"/>
    <updated>2014-08-03T22:23:00+01:00</updated>
    <id>http://stephenbartholomew.co.uk/blog/2014/08/03/from-subtle-sexist-to-aspiring-feminist</id>
    <content type="html"><![CDATA[<p>I always just <em>assumed</em> I was a feminist. All of my friends as a kid were girls. I’ve always had a very equal relationship with my wife and never thought that there were specific roles that women should be limited to.</p>

<p>However, I recently started to learn about the more nuanced elements of sexism &amp; feminism. Looking back on my opinions I’m kinda appalled.</p>

<h2>Women in the Workplace</h2>

<p>For a number of years in my 20s I ran a small web development agency. We never got big enough to really hire outside of a couple of freelancers but it was just a given that we wouldn’t hire women.</p>

<p>It wasn’t because we thought that women don’t make good engineers - they were just too… complicated.</p>

<p>I kid you not - the two biggest concerns in my mind were:</p>

<ul>
<li>Pregnancy</li>
<li>Workplace relationships</li>
</ul>


<p>What.The.Fuck.</p>

<p>In my early 20s I remember thinking about how men &amp; women were fundamentally designed differently: women are clearly better suited to homemaking/babies and men make the money. Just look at cavemen - just logical right? I so vividly remember the thought process and how it made perfect sense.</p>

<p>So why am I saying all this. Kinda wondering that myself reading it back.</p>

<h2>Facing the Truth</h2>

<p>It’s like this: I think of myself a reasonable person. I would never in my life post the kinda of bile and hate I see some posting in forums and comment sections. But to say that I haven’t actively contributed to the problems women face would be denial.</p>

<p>Even earlier this year I was pretty much in the ‘not all men’ &amp; ‘this isn’t equality’ camp but something made me stop and listen for a while. I talked to my wife, I followed a load of women on twitter and started reading.</p>

<p>I came to understand why this isn’t a simple matter of making things ‘equal’ on the surface. It was like a punch to the gut when I read <a href="http://www.xojane.com/issues/feminism-men-practical-steps">this article</a>:</p>

<blockquote>“Get in the habit of treating your maleness as an unearned privilege”</blockquote>


<p>But then I thought about it for 5 minutes. Men and women are born equal but men are instantly given an advantage in society.  Girls are weaker. Girls cannot handle certain subjects. Girls should dress/act a certain way.  Women should take more care when going out with friends. Women should expect sexual advances from men. And on and on.</p>

<h2>&#8220;Equality&#8221; and Debt</h2>

<p>Absolute equality would be totally awesome but it’s an unreasonable expectation. The opinions of society don’t change overnight and the cultural memory that women have is not broken by just saying “hey we’re all equal now!”.</p>

<p>Imagine we’re playing a game where we all stack playing cards in a tower to see who builds one with 6 rows first. The only thing is that the cards are on top of a mountain you have to climb up first.  As men, we’re already at the top saying “HEY - WE’RE ALL EQUAL NOW - YOU CAN TOTALLY PLAY THE GAME WITH US NOW - 1,2,3 GO!”.</p>

<p>Weird analogy? Maybe.</p>

<p>Basically, we have a debt to pay. It’s really the only way to address balance in any diversity issue but so few people understand this. The term ‘privilege’ is despised by many but understanding it is key to making a real difference.</p>

<p>Men can actually help here but we’re going to have to accept the hard stuff along the way.</p>

<p>Before you get angry, before you feel hard done by or offended - just stop. No one is taking your job away or threatening your life. Just suck it up and try to understand what’s really going on here. Then see how you can help.</p>

<p>We&#8217;re going to hear things that challenge us and we&#8217;re not going to get it right every time but worthwhile change is often the hardest.  I&#8217;m personally so underqualified to be talking about any of this but I wanted to say <em>something</em>.</p>

<p>To hear from people who actually know what they&#8217;re talking about, start here: <a href="http://www.xojane.com/issues/feminism-men-practical-steps">35 Practical steps men can take to support Feminism</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dev Diary - 11th July 2014]]></title>
    <link href="http://stephenbartholomew.co.uk/blog/2014/07/11/dev-diary-11th-july-2014/"/>
    <updated>2014-07-11T17:17:00+01:00</updated>
    <id>http://stephenbartholomew.co.uk/blog/2014/07/11/dev-diary-11th-july-2014</id>
    <content type="html"><![CDATA[<h2>Javascript Debugging Joy</h2>

<p>I&#8217;m way late to the party on this - I just discovered the <code>debugger</code> command: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger">debugger - JavaScript | MDN</a></p>

<p>You get an analysis of the current callstack and can interact with the app within the scope <code>debugger</code> was called.</p>

<p>After spending quite a bit of time in Android studio where this is a common part of debugging workflow, this is a very welcome addition to my toolset.</p>

<h2>Android</h2>

<p>Speaking of Android, I&#8217;ve been working my way through the <a href="http://www.bignerdranch.com/we-write/android-programming">Big Nerd Ranch&#8217;s Android book</a> in preparation for starting development of a side project I&#8217;m kicking off in the next few weeks.</p>

<p>Despite the <a href="http://stephenbartholomew.co.uk/blog/2014/04/25/dev-diary-25th-april-2014/">positive parts of Xamerin</a>, I&#8217;ve chosen to go native.  I&#8217;m keen to learn Java and the native Android platform so it&#8217;s a much better choice for me right now.</p>

<p>So far I&#8217;m really enjoying Java. As <a href="http://blog.existentialize.com/better-java.html">Sean Cassidy points out</a> Java might not be as bad as many would have you think.</p>

<h2>Old Code</h2>

<p>I was amused and slight embarrassed to come across some old open source code of mine from 2002: <a href="http://code.activestate.com/recipes/125901-php-mysql-search-class/">PHP MySQL Search Class</a>.</p>

<p>My lack of competence with SQL shines through as I pull down the <em>entire table</em> of data and do the filtering in PHP.</p>

<h2>Watching</h2>

<p>Philip Roberts&#8217;s talk on the <a href="http://vimeo.com/96425312">Javascript runtime</a> is required viewing for anyone working with Javascript.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Right Lines]]></title>
    <link href="http://stephenbartholomew.co.uk/blog/2014/06/29/the-right-lines/"/>
    <updated>2014-06-29T09:49:00+01:00</updated>
    <id>http://stephenbartholomew.co.uk/blog/2014/06/29/the-right-lines</id>
    <content type="html"><![CDATA[<p>I just pushed some code that fixed some fairly major issues I discussed in <a href="http://stephenbartholomew.co.uk/blog/2014/06/27/dev-diary-27th-june-2014/">Friday&#8217;s Dev Diary</a>. This amounted to about 4 hours work but it summed up to around 5 lines changed in production code.</p>

<p>It would have been easy to jump in and start panic hacking.  However, most of that 4 hours was spent manual testing, proving/debunking assumptions, reading documentation, experimenting etc.</p>

<p>I&#8217;m reminded that so much of programming, like any other craft, is about knowing the <em>right</em> lines to write - not how many.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dev Diary - 27th June 2014]]></title>
    <link href="http://stephenbartholomew.co.uk/blog/2014/06/27/dev-diary-27th-june-2014/"/>
    <updated>2014-06-27T07:32:00+01:00</updated>
    <id>http://stephenbartholomew.co.uk/blog/2014/06/27/dev-diary-27th-june-2014</id>
    <content type="html"><![CDATA[<h2>App Store Approval</h2>

<p>We finally got App store approval! We had low expectations about Apple&#8217;s turnaround but our resubmission was approved within a few hours. After the various rejections, subsequent unplanned development and uncertainty, this has been a huge relief for the team. Of course we&#8217;re a few days from actual users getting their hands on it - then the real fun starts&#8230;</p>

<h2>More Testing</h2>

<p>As I&#8217;ve discussed <a href="http://stephenbartholomew.co.uk/blog/2013/12/14/automated-ui-testing-with-cucumber-for-cordova-phonegap-apps/">before</a> our team is very committed to testing. This week however I&#8217;ve realised just how easy it is to miss regressions when your app is in flux. In particular two things stood out that we&#8217;re going to address immediately:</p>

<p><strong> We missed some fairly likely scenarios in our integration specs </strong><br/>
Testing use cases that involve offline > online transistions can be tough and we missed a particular case that had been tested to death manually when we first implemented. However, a point upgrade of one library introduced a regression that broke this use case. Our automated specs missed it.</p>

<p>Thankfully, <a href="http://appium.io/">Appium 1.0</a> made testing cases like this a whole lot easier so we can fix it but this shows that even with a motivated team, it&#8217;s easy to miss things if the friction to testing is high.</p>

<p>More broadly, we&#8217;ve noticed that our integration specs cover a lot of micro use cases instead of more closely simulating a user interacting with the app. Our plan is to simplify with full stack pathways through the app instead of individually specing each item of functionality seperately.</p>

<p><strong> Our internal staff testers didn&#8217;t really test until we got approval </strong><br/>
One of the company&#8217;s marketing people found the regression while testing after we announced App store approval. This was great but I was disappointed that we hadn&#8217;t had more people testing against the beta builds that have been pushed out for the past few months. This week has been great for digging out bugs but many could have been spotted and dealt with weeks ago rather than just before launch.</p>

<p>In an ideal world we&#8217;d be able to push out to a team of dedicated testers which may be a direction we&#8217;ll go in. We&#8217;ll probably also chat to the staff and see if there&#8217;s any way we can make things easier for them to pick up during development.</p>

<h2>Charles Proxy</h2>

<p>One bug that I found occurred when the device lost connection during a download of data. The app should cope with this but I found myself in a constant loading state while testing the app on a train. I used <a href="http://www.charlesproxy.com/">Charles proxy</a> to try different scenarios after reading <a href="http://codewithchris.com/tutorial-using-charles-proxy-with-your-ios-development-and-http-debugging/">this post</a>. I&#8217;d like to try building automated specs (given our experience above) but in the meantime this has been invaluable for throwing different situations at the app to try and break it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dev Diary - 6th June 2014]]></title>
    <link href="http://stephenbartholomew.co.uk/blog/2014/06/06/dev-diary-6th-june-2014/"/>
    <updated>2014-06-06T07:33:00+01:00</updated>
    <id>http://stephenbartholomew.co.uk/blog/2014/06/06/dev-diary-6th-june-2014</id>
    <content type="html"><![CDATA[<h2>In-app Purchase</h2>

<p>Turns out that we need to implement some form of in-app purchase on our app in order to get into the app store. It can be frustrating with Apple because, despite giving us this guidance, they cannot give us a clear &#8216;yes&#8217; or &#8216;no&#8217; in principal until we submit. Because of this we focused on a minimal implementation and have almost completed the work with a week left in our current sprint.</p>

<p>We used the <a href="https://github.com/j3k0/PhoneGap-InAppPurchase-iOS">iOS In-App Purchase</a> plugin for Cordova/PhoneGap which works with both old and new receipt styles. Because we&#8217;re targeting iOS 7, we don&#8217;t need to have any server side components. Overall I&#8217;ve enjoyed digging into the IAP side of iOS dev - in particular the &#8220;Using Store Kit for In-App Purchases&#8221; video from <a href="https://developer.apple.com/videos/wwdc/2013/">WWDC 2013</a> really solidified my understanding.</p>

<h2>I18n with gettext</h2>

<p>Internationalization is a big deal for us as we largely target Japanese &amp; Chinese users. We&#8217;ve had a few ways approaching this in the past and all have become difficult to work with.</p>

<p><a href="https://twitter.com/timpeat">Tim</a> did some research and suggested we try out the old standard <a href="http://www.gnu.org/software/gettext/">gettext</a>. The benefit here is that the toolchain is highly advanced but the actual usage is very straight forward. It also uses standards that our translators are familiar with. I&#8217;m also impressed how simple the integration with code is. Having base keys of actual text means that code makes more sense to read:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">heading</span> <span class="o">=</span> <span class="nx">I18n</span><span class="p">.</span><span class="nx">gettext</span><span class="p">(</span><span class="s1">&#39;Welcome to my site&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>I wrapped up the <a href="https://github.com/zaach/jsxgettext">jsxgettext</a> npm module in a singleton that we could <code>require</code> through out the code where needed. Handlebars integration was very simple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Handlebars</span><span class="p">.</span><span class="nx">registerHelper</span><span class="p">(</span><span class="s1">&#39;tr&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">text</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">translation</span> <span class="o">=</span> <span class="nx">I18n</span><span class="p">.</span><span class="nx">gettext</span><span class="p">(</span><span class="nx">text</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">return</span> <span class="nx">translation</span><span class="p">;</span>
</span><span class='line'><span class="p">},</span> <span class="k">this</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can then extract translations into <code>.pot</code> files and use gettext&#8217;s <code>msgmerge</code> to handle merging &amp; building of locale <code>.po</code> files.</p>

<h2>Appium</h2>

<p>Our apps automated UI specs have been pretty flaky for a while. Many times a day we&#8217;d get failures from <a href="https://travis-ci.com/">Travis</a> because the simulator was just hanging or didn&#8217;t even boot. Thankfully <a href="http://appium.io/">Appium 1.0</a> dropped a few of weeks ago and the improvements looked promising. <a href="https://twitter.com/morgan_randy">Randy</a> set out getting our cucumber steps inline with the new API and so far everything has been running very smoothly.</p>

<h2>Swift</h2>

<p>Like many, many developers I was super excited after the <a href="http://www.apple.com/apple-events/june-2014/">Apple keynote</a> on Monday. As well as taking a look at the new APIs I&#8217;ve been working through the <a href="https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/swift_programming_language/TheBasics.html">Swift language guide</a>. Just getting familiar with the syntax and approach for now but I&#8217;m looking forward to writing some actual code in it soon. It&#8217;s great to see Apple moving on something like this and exciting to see another platform going in a functional programming direction.</p>

<h2>Reading</h2>

<p>I&#8217;ve read Ilya Grigorik&#8217;s <a href="https://www.igvita.com/2014/05/05/minimum-viable-block-chain/">Minimum Viable Block Chain</a> post multiple times this week - really interesting tech explained clearly. It&#8217;s made me think about ways to apply the concepts behind crypto currencies to other areas that have similar problem sets. Establishing validity and history is not limited to financial transactions.</p>

<h2>Listening</h2>

<p>I loved Radiolabs episode <a href="http://www.radiolab.org/story/things/">&#8220;Things&#8221;</a>. As always, interesting stories with lots to think about afterwards. I used to be very attached to &#8220;things&#8221; in the past and while I&#8217;ve improved, this episode really made me think about how more I could let go of.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dev Diary - 16th May 2014]]></title>
    <link href="http://stephenbartholomew.co.uk/blog/2014/05/16/dev-diary-16th-may-2014/"/>
    <updated>2014-05-16T07:33:00+01:00</updated>
    <id>http://stephenbartholomew.co.uk/blog/2014/05/16/dev-diary-16th-may-2014</id>
    <content type="html"><![CDATA[<h2>Analytics</h2>

<p>This week was mostly about analytics. I worked on <a href="https://github.com/danwilson/google-analytics-plugin/pull/22">updating and adding UserId features</a> to Dan Wilson&#8217;s <a href="https://github.com/danwilson/google-analytics-plugin">Cordova Google Analytics plugin</a>.</p>

<p>Overall I&#8217;m pleased with the result but the workflow of Cordova plugins is not straight forward, especially as there is no standard way to build a test suite. This meant manual testing all the way, reloading plugins in my actual app for each platform in order to test.</p>

<p>I&#8217;d like to hear about testing Cordova plugins - even at a unit level as it would make the process much slicker. I&#8217;ve had a few ideas so I may investigate myself at some point.</p>

<h2>Language Overload</h2>

<p>I&#8217;ve enjoyed the variation in programming languages I&#8217;ve had this week. Combining work on our app, the plugin work and personal study I&#8217;ve written a fair amount of C, C#, Objective-C, Java, Javascript &amp; Ruby.</p>

<h2>Back to Rails</h2>

<p>I&#8217;ve been away from regular Rails dev for quite a while so it was nice to get back by doing some upgrade work on a CMS app that I host for our <a href="http://www.nctmedway.org.uk">local NCT</a>. It was fairly painless to upgrade the app from 3.0.1 to 4.1 and along the way I got a good feel for the recent changes.</p>

<h2>Listening</h2>

<p>The Ruby Rouges had <a href="https://twitter.com/jewelia">Julia Grace</a> on to talk about <a href="http://rubyrogues.com/156-rr-hardware-hacking-with-julia-grace/">hardware hacking</a>.</p>

<p><a href="http://5by5.tv/directional/11">Directional</a> did a 2 hour long commentary of the Nintendo DS keynote from 10 years ago.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes from #isTDDDead?]]></title>
    <link href="http://stephenbartholomew.co.uk/blog/2014/05/09/notes-from-number-istdddead/"/>
    <updated>2014-05-09T17:04:00+01:00</updated>
    <id>http://stephenbartholomew.co.uk/blog/2014/05/09/notes-from-number-istdddead</id>
    <content type="html"><![CDATA[<p>I worried that I was going to find the discussion between <a href="http://twitter.com/dhh">DHH</a>, <a href="http://twitter.com/kentbeck">Kent Beck</a> and <a href="http://twitter.com/martinfowler">Martin Fowler</a> annoying but I actually really enjoyed it. Well worth <a href="https://plus.google.com/events/ci2g23mk0lh9too9bgbp3rbut0k">watching</a>.</p>

<p>Kent &amp; Martin&#8217;s responses seemed quite surprising to DHH who appears to have had a very dogmatic experience of TDD. The daily use of the guys that were influential in the popularisation of the techniques were more pragmatic than many people will have imagined.</p>

<p>I look forward to the next discussion where I think we&#8217;ll get into the meat of TDD.</p>

<p>I wrote a number of headline points for your enjoyment!</p>

<h2>Kent Beck</h2>

<ul>
<li>If an idea is bad, find a cheap way to try it</li>
<li>Programmers have a right to feel confident about their code</li>
<li>TDD is one way to achieve confidence</li>
<li>Mixing techniques - some TDD, some not is totally fine - it&#8217;s powerful tool</li>
<li>TDD is often about trade offs</li>
<li>Don&#8217;t twist design to make it testable</li>
<li>Generally doesn&#8217;t mock anything

<ul>
<li>Mocking can couple you to implementation which too high a price</li>
<li>Repeatable feedback loop is far more important</li>
</ul>
</li>
</ul>


<h2> DHH</h2>

<ul>
<li>Dogma in TDD circles is big problem (i.e. you <em>must</em> TDD 100% to be a &#8216;professional&#8217;)</li>
<li>Mocking forces unnatural structure, supporting tests instead of code</li>
<li>&#8220;Easy to test == better design&#8221; is a fallacy</li>
<li>Understandability is often compromised</li>
</ul>


<h2>Martin Fowler</h2>

<ul>
<li>TDD does not imply isolation or mocking</li>
<li>Self-testing code is one of the most important things to deliver - TDD is one approach and it has other benefits</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dev Diary - 9th May 2014]]></title>
    <link href="http://stephenbartholomew.co.uk/blog/2014/05/09/dev-diary-9th-may-2014/"/>
    <updated>2014-05-09T07:32:00+01:00</updated>
    <id>http://stephenbartholomew.co.uk/blog/2014/05/09/dev-diary-9th-may-2014</id>
    <content type="html"><![CDATA[<h2>Android woes</h2>

<p>Mostly fighting off Android issues with our audio player component. Cordova&#8217;s <a href="https://github.com/apache/cordova-plugin-media">Media plugin</a> is a little difficult to work with as it&#8217;s very much written to work with older iOS APIs. This seems to have influenced how the other platform integrations work.</p>

<p>There are very limited event callbacks as the audio plays so I have to keep track of playing using a timer:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">timer</span> <span class="o">=</span> <span class="nx">setInterval</span><span class="p">(</span><span class="nx">_</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">updatePlayerStatus</span><span class="p">,</span> <span class="k">this</span><span class="p">),</span> <span class="mi">1000</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>I can&#8217;t rely on the timer for position data so I get it using <code>getCurrentPosition</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">updatePlayerStatus</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">player</span><span class="p">.</span><span class="nx">getCurrentPosition</span><span class="p">(</span><span class="nx">_</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">position</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// update UI</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Trouble is this sometimes leads to the UI being out of sync with the audio.</p>

<p>I&#8217;m also not happy with my UI implementation as it uses a native web form slider. This was a quick implementation but it needs workarounds to get a &#8216;played&#8217; track - which can be a little flaky.</p>

<h2>Android joys</h2>

<p>On a more positive note, I&#8217;ve found the joy of <a href="https://developer.chrome.com/devtools/docs/remote-debugging">remote debugging on Android</a>. I&#8217;m used to this on iOS of course but the Android tools are even better. Safari&#8217;s remote inspector constantly disappears and you don&#8217;t get any console logging that occurs prior to opening the inspector. Very impressed with Android here.</p>

<h2>Listening</h2>

<p>I&#8217;ve mentioned <a href="http://www.imore.com/debug">Debug</a> before; they have great interviews with developers about their history &amp; work. This week they <a href="http://www.imore.com/debug-35-scotty-nsconference-and-remobjects">interviewed Scotty</a> of NSConference and iDeveloper fame.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dev Diary - 2nd May 2014]]></title>
    <link href="http://stephenbartholomew.co.uk/blog/2014/05/02/dev-diary-2nd-may-2014/"/>
    <updated>2014-05-02T07:42:00+01:00</updated>
    <id>http://stephenbartholomew.co.uk/blog/2014/05/02/dev-diary-2nd-may-2014</id>
    <content type="html"><![CDATA[<p>A little slow this week while we debate largely non-technical issues with Apple. Doubling-down on Android is the order of the week.</p>

<hr />

<p>On a more positive front we had a very successful deploy of a huge improvement to the most important part of our service. It was a multi-app deploy and has so far gone off without a hitch. This is how it <em>should</em> be of course but you can never be 100% until it&#8217;s in the wild. As well as <a href="http://twitter.com/morgan_randy">Randy&#8217;s</a> awesome code we also did quite a bit of manual testing and a detailed code review.</p>

<h2>Listening</h2>

<p><a href="https://twitter.com/glassbottommeg">Megan Fox</a> discussed game dev on this week&#8217;s <a href="http://www.rubyrogues.com">Ruby Rouges</a> which was low on Ruby but and interesting insight into an industry so different to the web dev I&#8217;m used to.</p>

<p>I literally cried listening to <a href="https://twitter.com/ProfSaraSeager">Sara Seager</a> on <a href="http://storycollider.org/podcast/2014-04-30">Story collider</a>. The episode is funny, tragic but also beautifully inspiring - impressive for only 16 minutes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dev Diary - 25th April 2014]]></title>
    <link href="http://stephenbartholomew.co.uk/blog/2014/04/25/dev-diary-25th-april-2014/"/>
    <updated>2014-04-25T07:32:00+01:00</updated>
    <id>http://stephenbartholomew.co.uk/blog/2014/04/25/dev-diary-25th-april-2014</id>
    <content type="html"><![CDATA[<h2>This week</h2>

<p>The app store wait continues while we work on promo sites and continued Android fixes.</p>

<h2>Spending time with Android</h2>

<p>I&#8217;ve spend the week using a Nexus 5 as my carry phone to get a feel for the subtle differences in the platform. It&#8217;s been a good learning exercise as I now have a better understanding of Android.</p>

<p>On the whole it&#8217;s what I expected: great service integration &amp; some interesting features but way lower quality of hardware and software. I&#8217;ve always thought the UI looked messy but it&#8217;s actually just a bad user experience in many places.</p>

<h3>Third-party apps</h3>

<p>I&#8217;m a heavy podcast user - I listen to multiple podcasts during the day. My week on Android was made worse but a complete lack of decent podcast clients. Every one of them was awful - confusing, overblown interfaces, even the &#8216;basic&#8217; features were impossible to use and understand. I tried many - both paid and free - from &#8216;the best of&#8217; lists and none of them made any sense.</p>

<h2>Xamerin</h2>

<p>Like many programmers my reaction to the lack of a decent podcast client was to think &#8216;hey - I could write my own!&#8217;. This lead me to the <a href="http://xamarin.com/">Xamerin Project</a>. I remember Xamerin &amp; Mono from the early 2000s when I was primarily working in .NET.</p>

<p>After working on a PhoneGap-based project it was interesting to see another approach to the problem of cross-device development. So far I&#8217;m impressed. The main idea is to write your core code in shared libraries then create platform-specific UI code that hooks up to it. The whole thing is then compiled down and run on a platform-specific runtime shipped with the app.</p>

<h2>DHH vs TDD</h2>

<p>I was a die-hard, London-school TDDer and boy did I talk about it. My approach has softened a lot recently. I broadly agree with DHH&#8217;s issue with being so prescriptive. Many things that we treat as process should actually be tools for getting the job done. Pair programming, TDD, Agile etc are all susceptible to &#8216;silver-bullet&#8217; syndrome.</p>

<p>It is however, important to remember that skepticism is about applying critical thinking - not just dismissing out of hand. The urge to argue against the doctrine can blind you to the good stuff. For example, you&#8217;re missing out if you&#8217;ve <em>never</em> used tests as a way to drive design. A lot of the time it just makes the feedback cycle quicker.</p>

<p>Ultimately we&#8217;re all just trying to write good code and get good results. I can&#8217;t say it better than Zed Shaw: <a href="http://programming-motherfucker.com/">Programming, Motherfucker</a>.</p>

<h2>Listening</h2>

<p>The ongoing debates and issues surrounding sexism in tech have no doubt been on everyone&#8217;s minds recent. The <a href="http://www.imore.com/debug-34-sexism-tech">Debug podcast</a> had a great discussion with a panel of women in the tech industry.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dev Diary - 17th April 2014]]></title>
    <link href="http://stephenbartholomew.co.uk/blog/2014/04/17/dev-diary-17th-april-2014/"/>
    <updated>2014-04-17T14:32:00+01:00</updated>
    <id>http://stephenbartholomew.co.uk/blog/2014/04/17/dev-diary-17th-april-2014</id>
    <content type="html"><![CDATA[<h2>This week</h2>

<p>We&#8217;re now in the &#8216;Waiting for Review&#8217; stage of every iOS release so most of the time has been spent tidying up, spiking new features and bug fixing in prep for our Android release.</p>

<h2>Listening to smart people</h2>

<p>A few weeks ago I had a debate about our evolving API with my good friend &amp; college <a href="http://twitter.com/timpeat">Tim</a>. He was pushing for a more &#8216;hypermedia-style&#8217; while I was more keen on &#8216;keeping things simple&#8217;.  I&#8217;ve always kept and ear to the ground on hypermedia but it felt too up in the air still.</p>

<p>My mind has been changed after listening to the &#8221;<a href="http://javascriptjabber.com/104-jsj-hypermedia-apis-with-steve-klabnik/">Hypermedia APIs</a>&#8221; epsiode of Javacript Jabber where <a href="http://twitter.com/steveklabnik">Steve Klabnik</a> goes in depth on the philosophy behind hypermedia and talks about <a href="http://jsonapi.org">jsonapi.org</a>.  With a specification building around it - and the benefits of convention and a richer data set - I really feel like it&#8217;s something we can get behind. I&#8217;m really glad we versioned our APIs sensibly!</p>

<p>I&#8217;m also resolved to dig deeper before dismissing an idea. A throw away comment from Steve hit it home for me: &#8220;I was like, &#8216;That person&#8217;s smart. But they said something that sounds stupid. I should maybe think about why I feel that’s true and maybe go look into what their argument is.&#8217;&#8221;.</p>

<h2>Podcasts</h2>

<p>The past few Javascript Jabber episodes have really stood out for me. <a href="https://twitter.com/rockbot">Raquel Vélez</a> talking about <a href="http://javascriptjabber.com/103-jsj-robots-with-raquel-velez/">robotics and Javascript</a> was fantastic and really inspiring to get out and play with something other than pure code.</p>

<p>The Incomparable have rebooted their podcast <a href="http://www.theincomparable.com/teevee/">Teevee</a>. At there moment they&#8217;re talking about Game of Thrones.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dev Diary - 11th April 2014]]></title>
    <link href="http://stephenbartholomew.co.uk/blog/2014/04/11/dev-diary-11th-april-2014/"/>
    <updated>2014-04-11T13:20:00+01:00</updated>
    <id>http://stephenbartholomew.co.uk/blog/2014/04/11/dev-diary-11th-april-2014</id>
    <content type="html"><![CDATA[<h2>This week</h2>

<p>Super excited that the project I&#8217;m on a work is shipping next week!</p>

<p>Looking back I&#8217;m pretty impressed with what we’ve achieved so far.  We&#8217;ve used open source tech well but we’re still only a small team.  Over the coming weeks we&#8217;ll be shipping an app on both iOS and Android that hooks up to our existing backend systems - then the real work starts!</p>

<hr />

<p>We were lucky enough to not be vulnerable to heartbleed but I&#8217;ve really enjoyed digging into the bug.  There’s a great rundown of the specifics <a href="http://blog.existentialize.com/diagnosis-of-the-openssl-heartbleed-bug.html">here</a>.</p>

<p>I’ve always worked in memory managed languages, but my current C studying has just hit memory management. I was pleased to be able to keep up!</p>

<h2>Reading</h2>

<p>I&#8217;ve finally picked up <a href="http://sicpebook.wordpress.com/">SICP</a>. Not too far in yet but it’s great to be digging deeper into compsci.</p>

<p>On my commute I’m still working through the &#8221;<a href="http://c.learncodethehardway.org/">Learn C the Hard Way</a>&#8221; which has been a lot of fun.  I have to confess that I’ve started copy/pasting the code but that is meaning I have more time for the ‘Extra Credit’ exercises.</p>

<p>My son is obsessed with Minecraft so I’ve also picked up the <a href="http://pragprog.com">pragprog</a>&#8217;s <a href="http://pragprog.com/book/ahmine/learn-to-program-with-minecraft-plugins">book on creating plugins for the game</a>. It’s giving me a light introduction to Java and has been good to pair with a 5 year old.</p>

<h2>Listening</h2>

<p>Related to the Minecraft obsession, I’ve found the “Volume Alpha” by C418 really good for coding.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Iterate Imperfection]]></title>
    <link href="http://stephenbartholomew.co.uk/blog/2014/04/07/iterate-imperfection/"/>
    <updated>2014-04-07T13:21:00+01:00</updated>
    <id>http://stephenbartholomew.co.uk/blog/2014/04/07/iterate-imperfection</id>
    <content type="html"><![CDATA[<p>My wife has had the same website I built for her <a href="http://www.sevenveils.co.uk">dance business</a> in 2005. In that time we&#8217;ve had countless attempts at redeveloping it, normally starting with opening Photoshop, or setting up an account on the latest CMS service. These attempts all ended up half completed.</p>

<p>Running off the high of an event on Saturday night, we sat down on Sunday to prepare for the next show. Rather than the usual hacky updates, I decided to do improve things a little. Not a full rebuild, not perfect - but good enough.</p>

<!-- more -->


<p>3 hours later I had not only made the content changes but also improved the layout  <em>and</em> made developing it much easier.</p>

<h2> Before</h2>

<ul>
<li>Table-based layout</li>
<li>Updated via Dreamweaver / SFTP</li>
<li>Broken layout</li>
</ul>


<p><img src="http://stephenbartholomew.co.uk/images/blog/iterate-imperfection/before.jpg"/></p>

<h2> After</h2>

<ul>
<li>Pure CSS-based layout</li>
<li>Source control on Bitbucket</li>
<li>Deployed via Capistrano</li>
<li>Refreshed design</li>
<li>Google analytics</li>
</ul>


<p><img src="http://stephenbartholomew.co.uk/images/blog/iterate-imperfection/after.jpg"/></p>

<h2>Things I didn&#8217;t do</h2>

<ul>
<li>Replace the PHP header/footer templating with something more modern</li>
<li>Convert to CSS framework</li>
<li>Significant redesign</li>
<li>Fix all HTML/CSS/content issues</li>
</ul>


<p>The changes aren&#8217;t earth-shattering but they&#8217;re a actually a big step forward from what was there before. Improving the development workflow has also meant I can make regular updates much more easily.</p>

<p>I find that it&#8217;s easy to get overwhelmed by a large task but often, I&#8217;ve added a lot of cruft to the task list that just isn&#8217;t needed. This time I focused on a few important changes and I&#8217;m really happy with the results so far - what&#8217;s more, so is my wife :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automated UI Testing with Cucumber for Cordova/Phonegap apps]]></title>
    <link href="http://stephenbartholomew.co.uk/blog/2013/12/14/automated-ui-testing-with-cucumber-for-cordova-phonegap-apps/"/>
    <updated>2013-12-14T20:45:00+00:00</updated>
    <id>http://stephenbartholomew.co.uk/blog/2013/12/14/automated-ui-testing-with-cucumber-for-cordova-phonegap-apps</id>
    <content type="html"><![CDATA[<p>Both iOS and Android have UI automation frameworks for driving the UI which is great for integration/acceptance testing for your app.  However, when you&#8217;re using a web/native hybrid framework like Cordova, this can get tricky.</p>

<p>If you come from the Ruby world, you may also be used to using Cucumber for integration testing. While the testing landscape for hybrid apps is a little rocky, a lot of smart people are working on some great tools to improve things. With some effort, you can have Cucumber-based integration spec suite up and running for your hybrid app with relative ease.</p>

<!-- more -->


<h2>The Main Players</h2>

<h3>Appium</h3>

<p><a href="http://appium.io">Appium</a> can launch your app and interact with it via the platform&#8217;s automation framework. It provides a Selenium remote compatible interface to your app that you can use with an driver that supports it.</p>

<h3>Selenium WebDriver JS</h3>

<p>We&#8217;re going to use <a href="https://code.google.com/p/selenium/wiki/WebDriverJs">WebDriver JS</a> - the official Javascript driver for the Selenium project.  The documentation is a little thin on examples but once you get the hang of it</p>

<p>The web driver talks to any Seleinum-compatible REST-style API over HTTP. For our purposes this will be Appium but you can also point it at services like Browser stack which support a compatible API.</p>

<h3>cucumberjs</h3>

<p><a href="https://github.com/cucumber/cucumber-js">Cucumberjs</a> is an active and reasonably featured Javascript port of the <a href="http://cukes.info">Cucumber toolset</a>.</p>

<h3>Your app</h3>

<p>I&#8217;m assuming you&#8217;re working on a hybrid app using the latest Cordova (3.1.x at the time of writing).</p>

<h2>Setting up</h2>

<p>Appium is available as an npm package:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install appium</span></code></pre></td></tr></table></div></figure>


<p>There&#8217;s also an <a href="https://bitbucket.org/appium/appium.app/downloads/">OSX app</a> available.</p>

<p>There are a few platform specific steps you&#8217;ll need to carry out to get up and running which you can find in the <a href="http://appium.io/getting-started.html">Appium Getting Started guide</a>.</p>

<p>On iOS for example, you need to run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo authorize_ios</span></code></pre></td></tr></table></div></figure>


<p>to allow Appium to use UI Automation and the simulator.</p>

<p>Next, you&#8217;ll need to install a few node modules:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install -g cucumberjs selenium-webdriver</span></code></pre></td></tr></table></div></figure>


<p>You can also use <a href="http://">Grunt</a> to manage these modules. The <code>grunt-cucumber</code> has various tasks for running your specs.</p>

<p>You&#8217;ll need to setup a few directories in your app yourself:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>features/
</span><span class='line'>    step_definitions/
</span><span class='line'>    support/</span></code></pre></td></tr></table></div></figure>


<h2>Creating the World</h2>

<p>The World class gives common setup and configuration to your cucumber environment.  Create <code>features/support/world.js</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">appPath</span> <span class="o">=</span> <span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">&#39;/../../relative/path/to/my/cordova/built/app/MyApp.app&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">webdriver</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;selenium-webdriver&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">driver</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">webdriver</span><span class="p">.</span><span class="nx">Builder</span><span class="p">().</span>
</span><span class='line'>  <span class="nx">withCapabilities</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">browserName</span><span class="o">:</span> <span class="s1">&#39;iOS&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">platform</span><span class="o">:</span>    <span class="s1">&#39;Mac&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">version</span><span class="o">:</span>     <span class="s1">&#39;7.0&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">app</span><span class="o">:</span>         <span class="nx">appPath</span>
</span><span class='line'>  <span class="p">}).</span>
</span><span class='line'>  <span class="nx">usingServer</span><span class="p">(</span><span class="s1">&#39;http://localhost:4723/wd/hub&#39;</span><span class="p">).</span>
</span><span class='line'>  <span class="nx">build</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">World</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">World</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">driver</span> <span class="o">=</span> <span class="nx">driver</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">callback</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">World</span> <span class="o">=</span> <span class="nx">World</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, the webdriver is setup to send configuration details to the Appium interface. We pass in versioning information along with the path to the app we&#8217;d like to launch.</p>

<h2>First Steps</h2>

<p>Create <code>features/step_definitions/app_steps.js</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">appSteps</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">World</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;../support/world.js&quot;</span><span class="p">).</span><span class="nx">World</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">Given</span><span class="p">(</span><span class="sr">/^I load the app$/</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">driver</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">driver</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">driver</span><span class="p">.</span><span class="nx">getAllWindowHandles</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">handles</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">driver</span><span class="p">.</span><span class="nx">switchTo</span><span class="p">().</span><span class="nb">window</span><span class="p">(</span><span class="nx">handles</span><span class="p">[</span><span class="mi">0</span><span class="p">]).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">callback</span><span class="p">();</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">Then</span><span class="p">(</span><span class="sr">/^I should see &quot;([^&quot;]*)&quot;$/</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">text</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">driver</span><span class="p">.</span><span class="nx">getPageSource</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">source</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">source</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="nx">text</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">callback</span><span class="p">();</span>
</span><span class='line'>      <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">callback</span><span class="p">.</span><span class="nx">failure</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">appSteps</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Take particular note of the &#8216;I load the app&#8217; step. This code selects the <code>UIWebView</code> that contains your hybrid app as the main window to drive. Without this, you&#8217;ll be running against the native app.</p>

<p>One gotcha here is the webdriver syntax. It uses promises which can be a little strange to work with if you&#8217;re coming from other platforms. I&#8217;ll be digging deeper on this syntax in a future post.</p>

<p>With these steps we can build a basic cucumber feature:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='cucumber'><span class='line'><span class="k">Feature:</span><span class="nf"> App load</span>
</span><span class='line'><span class="nf">  As a user</span>
</span><span class='line'><span class="nf">  I want to load the app</span>
</span><span class='line'><span class="nf">  So that I can experience great joy</span>
</span><span class='line'>
</span><span class='line'><span class="nf">  </span><span class="k">Scenario:</span><span class="nf"> Loading the app successfully</span>
</span><span class='line'><span class="k">    Given </span><span class="nf">I load the app</span>
</span><span class='line'><span class="nf">    </span><span class="k">Then </span><span class="nf">I should see &quot;</span><span class="s">Hello</span><span class="nf">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Save this as <code>features/app_load.feature</code>. Replace &#8216;Hello&#8217; with some text that appears on the first screen of your app.</p>

<h2>Running</h2>

<p>Try this all out by running cucumberjs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cucumber'><span class='line'><span class="nf">cucumber.js</span>
</span></code></pre></td></tr></table></div></figure>


<p>You should see the simulator start up at this point, hopefully followed by some pleasing pass messages:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cucumber'><span class='line'><span class="nf">..</span>
</span><span class='line'>
</span><span class='line'><span class="s">1</span><span class="nf"> scenario (</span><span class="s">1</span><span class="nf"> passed)</span>
</span><span class='line'><span class="s">2</span><span class="nf"> steps (</span><span class="s">2</span><span class="nf"> passed)</span>
</span></code></pre></td></tr></table></div></figure>


<p>By this point I hope you&#8217;re up and running with the stack. Next time, we&#8217;ll dig a little further into the Selenium webdriver.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building SBGauge]]></title>
    <link href="http://stephenbartholomew.co.uk/blog/2013/11/05/building-sbgauge/"/>
    <updated>2013-11-05T17:59:00+00:00</updated>
    <id>http://stephenbartholomew.co.uk/blog/2013/11/05/building-sbgauge</id>
    <content type="html"><![CDATA[<p>I built <code>SBGauge</code> as part of <a href="http://www.groovecoachapp.com">GrooveCoach</a> as a way to indicate which &#8216;level&#8217; the user was on. When you tapped &#8216;+&#8217; or &#8216;-&#8217; the gauge changed accordingly. As part of developing that app I was keen to open source anything I could.</p>

<p>Given the flexibility of this simple library, I thought it would make an interesting code walkthrough.</p>

<!-- more -->


<h2>Drawing the Gauge</h2>

<p><code>SBGauge</code> consists of two <code>CAShapeLayer</code>s: the animating gauge itself and the &#8216;track&#8217; underneath.  The <code>draw</code> method simply creates two circles with different colors and adds them to the view&#8217;s backing layer:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="n">gaugeLayer</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">drawCircleLayer:</span><span class="n">self</span><span class="p">.</span><span class="n">gaugeColor</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">CAShapeLayer</span> <span class="o">*</span><span class="n">trackLayer</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">drawCircleLayer:</span><span class="n">self</span><span class="p">.</span><span class="n">trackColor</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">layer</span> <span class="nl">addSublayer:</span><span class="n">trackLayer</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">layer</span> <span class="nl">addSublayer:</span><span class="n">gaugeLayer</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>The circles are drawn by the <code>drawCircleLayer:(UIColor *)color</code> method in <code>SBGaugeView</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'>  <span class="n">circleLayer</span><span class="p">.</span><span class="n">path</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIBezierPath</span> <span class="nl">bezierPathWithRoundedRect:</span><span class="n">CGRectInset</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">bounds</span><span class="p">,</span> <span class="n">inset</span><span class="p">,</span> <span class="n">inset</span><span class="p">)</span>
</span><span class='line'>                                                <span class="nl">cornerRadius:</span><span class="n">radius</span><span class="o">-</span><span class="n">inset</span><span class="p">].</span><span class="n">CGPath</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using <code>CGRectInset</code> means we draw <em>within</em> the view itself, not on the outside. This is especially if you&#8217;re working in interface builder - the gauge shouldn&#8217;t bust out of the frame you create for the view.</p>

<h2>Context</h2>

<p><code>SBGaugeContext</code> is responsible for calculating how big the segments will be and keeping track of the current &#8216;step&#8217;.  It is initialized with the number of segments:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="n">gauge</span> <span class="o">=</span> <span class="p">[[</span><span class="n">SBGaugeContext</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithSegments:</span><span class="n">self</span><span class="p">.</span><span class="n">segments</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>When you tell <code>SBGauge</code> to <code>stepUp</code>, the current <code>SBGaugeContext</code> will figure out what the current &#8216;step&#8217; should now be. <code>SBGauge</code> will then draw based on this new context.</p>

<p>This decouples the logic surrounding step calculations from the drawing of the view itself.</p>

<h2>Animating</h2>

<p>When the view is redrawn, a <code>CABasicAnimation</code> is created to animate from the previous gauge step to the current step. <code>animateProgress</code> uses the gauge layer&#8217;s &#8216;strokeEnd&#8217; animate the length of the gauge:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="c1">// setup a basic animation using strokeEnd</span>
</span><span class='line'><span class="n">CABasicAnimation</span> <span class="o">*</span><span class="n">drawAnimation</span> <span class="o">=</span> <span class="p">[</span><span class="n">CABasicAnimation</span> <span class="nl">animationWithKeyPath:</span><span class="s">@&quot;strokeEnd&quot;</span><span class="p">];</span>
</span><span class='line'><span class="n">drawAnimation</span><span class="p">.</span><span class="n">duration</span>            <span class="o">=</span> <span class="mf">0.2</span><span class="p">;</span>
</span><span class='line'><span class="n">drawAnimation</span><span class="p">.</span><span class="n">repeatCount</span>         <span class="o">=</span> <span class="mf">1.0</span><span class="p">;</span>
</span><span class='line'><span class="n">drawAnimation</span><span class="p">.</span><span class="n">removedOnCompletion</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// set the from/to values based on the user&#39;s previous &#39;step&#39; &amp; the current one</span>
</span><span class='line'><span class="n">drawAnimation</span><span class="p">.</span><span class="n">fromValue</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithFloat:</span><span class="n">gauge</span><span class="p">.</span><span class="n">previous</span><span class="p">];</span>
</span><span class='line'><span class="n">drawAnimation</span><span class="p">.</span><span class="n">toValue</span>   <span class="o">=</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithFloat:</span><span class="n">gauge</span><span class="p">.</span><span class="n">value</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// set how the animation should look</span>
</span><span class='line'><span class="n">drawAnimation</span><span class="p">.</span><span class="n">timingFunction</span> <span class="o">=</span> <span class="p">[</span><span class="n">CAMediaTimingFunction</span> <span class="nl">functionWithName:</span><span class="n">kCAMediaTimingFunctionEaseIn</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// finally apply the animation to the gauge layer</span>
</span><span class='line'><span class="p">[</span><span class="n">gaugeLayer</span> <span class="nl">addAnimation:</span><span class="n">drawAnimation</span> <span class="nl">forKey:</span><span class="nb">nil</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>You&#8217;ll see that <code>SBGaugeContext</code> handles the calculation of the value itself.</p>

<h2>Style</h2>

<p><code>SBGauge</code> doesn&#8217;t have any additional built in &#8216;looks&#8217; but by simply setting the <code>width</code> property, a number of different styles can be achieved.</p>

<p>The size of the gauge itself is calcuated based on the containing frame (plus some hardcoded tweaking):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="n">CGFloat</span> <span class="n">radius</span> <span class="o">=</span> <span class="p">(</span><span class="n">MIN</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">,</span><span class="n">self</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span><span class="o">+</span><span class="mi">40</span><span class="p">;</span>
</span><span class='line'><span class="n">CGFloat</span> <span class="n">inset</span>  <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This makes it possible to get at least an idea of the size of the view in interface builder.</p>

<hr/>


<p>That&#8217;s really all there is to it!</p>

<p>I&#8217;ve since experimented with driving the guage using a large number of steps and an <code>NSTimer</code> which find in the project&#8217;s <a href="http://www.github.com/stevebartholomew/SBGauge/">README</a>.</p>

<p><a href="http://www.github.com/stevebartholomew/SBGauge">Check it out on Github</a> - I&#8217;d love your feedback.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Glass Bottles and the Law of Demeter]]></title>
    <link href="http://stephenbartholomew.co.uk/blog/2012/06/07/glass-bottles-and-the-law-of-demeter/"/>
    <updated>2012-06-07T21:41:00+01:00</updated>
    <id>http://stephenbartholomew.co.uk/blog/2012/06/07/glass-bottles-and-the-law-of-demeter</id>
    <content type="html"><![CDATA[<p>I can&#8217;t throw glass bottles in the bin anymore.  I&#8217;m not a dread-locked earth hippy but I&#8217;ve been recycling for so many years that it just feels&#8230;wrong.</p>

<p>Good habits work best when they&#8217;re instinctual - like muscle memory.</p>

<!-- more -->


<p></p>

<p>What if this looked weird to you?</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">organisation</span><span class="o">.</span><span class="n">subscription</span><span class="o">.</span><span class="n">memberships</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">user_id</span><span class="p">:</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you&#8217;re a Rails developer this kind of thing probably litters your code but anyone with a site of significant size knows what impact this has on your tests.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;creates a membership&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">o</span> <span class="o">=</span> <span class="no">Organisation</span><span class="o">.</span><span class="n">create</span>
</span><span class='line'>  <span class="n">subscription</span> <span class="o">=</span> <span class="n">o</span><span class="o">.</span><span class="n">subscription</span><span class="o">.</span><span class="n">create</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># hit the database a few more times</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Anyone else tried TDDing with a 10 minute-long test suite?</p>

<p>It also makes inject additional logic into process a real pain:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Membership</span>
</span><span class='line'>  <span class="n">before_create</span> <span class="ss">:sadface</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>So what if you instinctually <em>had</em> to abstract that interface - because chaining methods just feels wrong:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">organisation</span><span class="o">.</span><span class="n">issue_membership</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You only have to test the logic within the object you&#8217;re interested in. If the connections to other objects are only one level too, simple stubbing is all you need:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;creates a membership&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">o</span> <span class="o">=</span> <span class="no">Organisation</span><span class="o">.</span><span class="n">build</span>
</span><span class='line'>  <span class="n">subscription</span> <span class="o">=</span> <span class="n">stub</span>
</span><span class='line'>  <span class="n">subscription</span><span class="o">.</span><span class="n">should_receive</span><span class="p">(</span><span class="ss">:issue_membership</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span>
</span><span class='line'>  <span class="n">o</span><span class="o">.</span><span class="n">stub</span><span class="p">(</span><span class="n">subscription</span><span class="p">:</span> <span class="n">subscription</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">o</span><span class="o">.</span><span class="n">issue_membership</span><span class="p">(</span><span class="n">stub</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Injecting logic becomes trival and remains in the right place.  It also means the top-level interface to <code>Organisation</code> stays untouched, regardless of what happens futher down the logic chain.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Subscription</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">issue_membership</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>    <span class="n">happy_face</span>
</span><span class='line'>    <span class="n">memberships</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">user_id</span><span class="p">:</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The thinking here is nothing new and is only a shallow implementation of a deeper concept, but small habits can reap big rewards as your application grows.</p>

<h2>Key Points</h2>

<ul>
<li>Consider the entry points into the objects you create</li>
<li>You shouldn&#8217;t have to poke into objects that aren&#8217;t directly connected an object</li>
<li>Testing first will help with this - if you&#8217;re creating a load of objects just test one line of logic in a method - you should hear alarm bells</li>
</ul>


<h2>Further Reading</h2>

<ul>
<li><a href="http://objectsonrails.com/">Objects on Rails</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Todoist Part 1: The Todo]]></title>
    <link href="http://stephenbartholomew.co.uk/blog/2012/04/01/todoist-part-1-the-todo/"/>
    <updated>2012-04-01T20:55:00+01:00</updated>
    <id>http://stephenbartholomew.co.uk/blog/2012/04/01/todoist-part-1-the-todo</id>
    <content type="html"><![CDATA[<p>Todoist is a simple todo list application that I’ll be building from the ground up, focussing on the objects and interactions first.</p>

<!-- more -->


<p>I’ll be using Ruby 1.9.3, Rails 3.2 and Rspec with Capybara for testing.</p>

<h2>Feature #1: Adding a Todo</h2>

<h3>An integration test</h3>

<p>The first thing I do is create a test explaining how I as a user want to interact with the application:</p>

<p><em>spec/integration/todos_integration_spec.rb:</em></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;spec_helper&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="s2">&quot;Todoist&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">context</span> <span class="s2">&quot;creating a todo&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;provides a form to create a new todo&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">visit</span> <span class="s2">&quot;/&quot;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">fill_in</span> <span class="s2">&quot;todo[body]&quot;</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="s2">&quot;Just something I need to do&quot;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">click_button</span> <span class="s2">&quot;Save&quot;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">page</span><span class="o">.</span><span class="n">should</span> <span class="n">have_content</span><span class="p">(</span><span class="s2">&quot;Added&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This wont pass and there’s a lot that needs to be hooked up for it to work so I’m going to forget about it for the moment.</p>

<p>The Todo class
My feature is ‘Adding a Todo’ so the first thing I’ll do is make a spec for a class called ‘Todo’ and a method called ‘add’:</p>

<p><em>spec/models/todo_spec.rb:</em></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">require_relative</span> <span class="err">‘</span><span class="o">.</span><span class="n">.</span><span class="o">/.</span><span class="n">.</span><span class="o">/</span><span class="n">app</span><span class="o">/</span><span class="n">models</span><span class="o">/</span><span class="n">todo</span><span class="err">’</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">Todo</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;adds a new todo item&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">task</span> <span class="o">=</span> <span class="s2">&quot;Something I have to do&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">todo</span> <span class="o">=</span> <span class="no">Todo</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">task</span><span class="p">:</span> <span class="n">task</span><span class="p">)</span>
</span><span class='line'>    <span class="n">todo</span><span class="o">.</span><span class="n">task</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="n">task</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Getting this to pass is straight forward:</p>

<p><em>app/models/todo.rb:</em></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Todo</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">attributes</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@attributes</span> <span class="o">=</span> <span class="n">attributes</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">task</span>
</span><span class='line'>    <span class="vi">@attributes</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:task</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">add</span><span class="p">(</span><span class="n">attributes</span><span class="p">)</span>
</span><span class='line'>    <span class="kp">new</span><span class="p">(</span><span class="n">attributes</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>More than one object
A single instance on its own isn’t particularly useful though.  I’ll add storage and retrieval:</p>

<p><em>spec/models/todo_spec.rb:</em></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;gets all todos&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">todo</span> <span class="o">=</span> <span class="no">Todo</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">task</span><span class="p">:</span> <span class="s2">&quot;Something&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="no">Todo</span><span class="o">.</span><span class="n">get_all_todos</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="n">todo</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And my Todo class becomes:</p>

<p><em>app/models/todo.rb:</em></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Todo</span>
</span><span class='line'>  <span class="vc">@@_todos</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">attributes</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@attributes</span> <span class="o">=</span> <span class="n">attributes</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">task</span>
</span><span class='line'>    <span class="vi">@attributes</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:task</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">add</span><span class="p">(</span><span class="n">attributes</span><span class="p">)</span>
</span><span class='line'>    <span class="n">todo</span> <span class="o">=</span> <span class="kp">new</span><span class="p">(</span><span class="n">attributes</span><span class="p">)</span>
</span><span class='line'>    <span class="vc">@@_todos</span> <span class="o">&lt;&lt;</span> <span class="n">todo</span>
</span><span class='line'>    <span class="n">todo</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">get_all_todos</span>
</span><span class='line'>    <span class="vc">@@_todos</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I can now add todo and retrieve them later.</p>

<p><strong>Next up:</strong> I&#8217;ll hook this up to a controller.</p>

<p>You can <a href="https://github.com/stevebartholomew/todoist/tree/77c29e49ae38a6b8ce3be2254b3809b43349fc18">view this commit on github</a></p>

<p>Got a comment? Drop me a message on <a href="http://twitter.com/sbartholomew">twitter</a>.</p>

<p><a href="http://stephenbartholomew.co.uk/atom.xml">Subscribe</a> to hear about the next in the series.</p>
]]></content>
  </entry>
  
</feed>
